// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/repositories/reward_filter_ilike.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRewardFilterILikeQuerier is a mock of RewardFilterILikeQuerier interface.
type MockRewardFilterILikeQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockRewardFilterILikeQuerierMockRecorder
}

// MockRewardFilterILikeQuerierMockRecorder is the mock recorder for MockRewardFilterILikeQuerier.
type MockRewardFilterILikeQuerierMockRecorder struct {
	mock *MockRewardFilterILikeQuerier
}

// NewMockRewardFilterILikeQuerier creates a new mock instance.
func NewMockRewardFilterILikeQuerier(ctrl *gomock.Controller) *MockRewardFilterILikeQuerier {
	mock := &MockRewardFilterILikeQuerier{ctrl: ctrl}
	mock.recorder = &MockRewardFilterILikeQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardFilterILikeQuerier) EXPECT() *MockRewardFilterILikeQuerierMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockRewardFilterILikeQuerier) Query(ctx context.Context, dest any, query string, argMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, dest, query, argMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockRewardFilterILikeQuerierMockRecorder) Query(ctx, dest, query, argMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRewardFilterILikeQuerier)(nil).Query), ctx, dest, query, argMap)
}
