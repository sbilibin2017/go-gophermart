// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/usecases/order_register.go

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/sbilibin2017/go-gophermart/internal/services"
)

// MockOrderValidator is a mock of OrderValidator interface.
type MockOrderValidator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderValidatorMockRecorder
}

// MockOrderValidatorMockRecorder is the mock recorder for MockOrderValidator.
type MockOrderValidatorMockRecorder struct {
	mock *MockOrderValidator
}

// NewMockOrderValidator creates a new mock instance.
func NewMockOrderValidator(ctrl *gomock.Controller) *MockOrderValidator {
	mock := &MockOrderValidator{ctrl: ctrl}
	mock.recorder = &MockOrderValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderValidator) EXPECT() *MockOrderValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockOrderValidator) Struct(i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockOrderValidatorMockRecorder) Struct(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockOrderValidator)(nil).Struct), i)
}

// MockOrderRegisterService is a mock of OrderRegisterService interface.
type MockOrderRegisterService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRegisterServiceMockRecorder
}

// MockOrderRegisterServiceMockRecorder is the mock recorder for MockOrderRegisterService.
type MockOrderRegisterServiceMockRecorder struct {
	mock *MockOrderRegisterService
}

// NewMockOrderRegisterService creates a new mock instance.
func NewMockOrderRegisterService(ctrl *gomock.Controller) *MockOrderRegisterService {
	mock := &MockOrderRegisterService{ctrl: ctrl}
	mock.recorder = &MockOrderRegisterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRegisterService) EXPECT() *MockOrderRegisterServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockOrderRegisterService) Register(ctx context.Context, order *services.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockOrderRegisterServiceMockRecorder) Register(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockOrderRegisterService)(nil).Register), ctx, order)
}
