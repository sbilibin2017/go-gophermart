// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/go-gophermart/internal/routers/gophermart.go

// Package routers is a generated GoMock package.
package routers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/sbilibin2017/go-gophermart/pkg/jwt"
)

// MockJWTDecoder is a mock of JWTDecoder interface.
type MockJWTDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockJWTDecoderMockRecorder
}

// MockJWTDecoderMockRecorder is the mock recorder for MockJWTDecoder.
type MockJWTDecoderMockRecorder struct {
	mock *MockJWTDecoder
}

// NewMockJWTDecoder creates a new mock instance.
func NewMockJWTDecoder(ctrl *gomock.Controller) *MockJWTDecoder {
	mock := &MockJWTDecoder{ctrl: ctrl}
	mock.recorder = &MockJWTDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTDecoder) EXPECT() *MockJWTDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockJWTDecoder) Decode(tokenStr string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", tokenStr)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockJWTDecoderMockRecorder) Decode(tokenStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockJWTDecoder)(nil).Decode), tokenStr)
}
