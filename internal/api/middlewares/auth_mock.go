// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/middlewares/auth.go

// Package middlewares is a generated GoMock package.
package middlewares

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/sbilibin2017/go-gophermart/internal/engines/jwt"
)

// MockJWTPArser is a mock of JWTPArser interface.
type MockJWTPArser struct {
	ctrl     *gomock.Controller
	recorder *MockJWTPArserMockRecorder
}

// MockJWTPArserMockRecorder is the mock recorder for MockJWTPArser.
type MockJWTPArserMockRecorder struct {
	mock *MockJWTPArser
}

// NewMockJWTPArser creates a new mock instance.
func NewMockJWTPArser(ctrl *gomock.Controller) *MockJWTPArser {
	mock := &MockJWTPArser{ctrl: ctrl}
	mock.recorder = &MockJWTPArserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTPArser) EXPECT() *MockJWTPArserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockJWTPArser) Parse(tokenStr string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenStr)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockJWTPArserMockRecorder) Parse(tokenStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockJWTPArser)(nil).Parse), tokenStr)
}
