// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/order_register.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-gophermart/internal/types"
)

// MockOrderRegisterUsecase is a mock of OrderRegisterUsecase interface.
type MockOrderRegisterUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRegisterUsecaseMockRecorder
}

// MockOrderRegisterUsecaseMockRecorder is the mock recorder for MockOrderRegisterUsecase.
type MockOrderRegisterUsecaseMockRecorder struct {
	mock *MockOrderRegisterUsecase
}

// NewMockOrderRegisterUsecase creates a new mock instance.
func NewMockOrderRegisterUsecase(ctrl *gomock.Controller) *MockOrderRegisterUsecase {
	mock := &MockOrderRegisterUsecase{ctrl: ctrl}
	mock.recorder = &MockOrderRegisterUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRegisterUsecase) EXPECT() *MockOrderRegisterUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockOrderRegisterUsecase) Execute(ctx context.Context, req *types.OrderRegisterRequest) (*types.OrderRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, req)
	ret0, _ := ret[0].(*types.OrderRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockOrderRegisterUsecaseMockRecorder) Execute(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockOrderRegisterUsecase)(nil).Execute), ctx, req)
}

// MockOrderRegisterRequestDecoder is a mock of OrderRegisterRequestDecoder interface.
type MockOrderRegisterRequestDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRegisterRequestDecoderMockRecorder
}

// MockOrderRegisterRequestDecoderMockRecorder is the mock recorder for MockOrderRegisterRequestDecoder.
type MockOrderRegisterRequestDecoderMockRecorder struct {
	mock *MockOrderRegisterRequestDecoder
}

// NewMockOrderRegisterRequestDecoder creates a new mock instance.
func NewMockOrderRegisterRequestDecoder(ctrl *gomock.Controller) *MockOrderRegisterRequestDecoder {
	mock := &MockOrderRegisterRequestDecoder{ctrl: ctrl}
	mock.recorder = &MockOrderRegisterRequestDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRegisterRequestDecoder) EXPECT() *MockOrderRegisterRequestDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockOrderRegisterRequestDecoder) Decode(w http.ResponseWriter, r *http.Request, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", w, r, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockOrderRegisterRequestDecoderMockRecorder) Decode(w, r, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockOrderRegisterRequestDecoder)(nil).Decode), w, r, v)
}
