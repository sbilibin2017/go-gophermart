// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/order_register.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/sbilibin2017/go-gophermart/internal/services"
)

// MockOrderRegisterService is a mock of OrderRegisterService interface.
type MockOrderRegisterService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRegisterServiceMockRecorder
}

// MockOrderRegisterServiceMockRecorder is the mock recorder for MockOrderRegisterService.
type MockOrderRegisterServiceMockRecorder struct {
	mock *MockOrderRegisterService
}

// NewMockOrderRegisterService creates a new mock instance.
func NewMockOrderRegisterService(ctrl *gomock.Controller) *MockOrderRegisterService {
	mock := &MockOrderRegisterService{ctrl: ctrl}
	mock.recorder = &MockOrderRegisterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRegisterService) EXPECT() *MockOrderRegisterServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockOrderRegisterService) Register(ctx context.Context, order *services.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockOrderRegisterServiceMockRecorder) Register(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockOrderRegisterService)(nil).Register), ctx, order)
}

// MockOrderRegisterDecoder is a mock of OrderRegisterDecoder interface.
type MockOrderRegisterDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRegisterDecoderMockRecorder
}

// MockOrderRegisterDecoderMockRecorder is the mock recorder for MockOrderRegisterDecoder.
type MockOrderRegisterDecoderMockRecorder struct {
	mock *MockOrderRegisterDecoder
}

// NewMockOrderRegisterDecoder creates a new mock instance.
func NewMockOrderRegisterDecoder(ctrl *gomock.Controller) *MockOrderRegisterDecoder {
	mock := &MockOrderRegisterDecoder{ctrl: ctrl}
	mock.recorder = &MockOrderRegisterDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRegisterDecoder) EXPECT() *MockOrderRegisterDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockOrderRegisterDecoder) Decode(r *http.Request, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", r, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockOrderRegisterDecoderMockRecorder) Decode(r, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockOrderRegisterDecoder)(nil).Decode), r, v)
}

// MockOrderRegisterValidator is a mock of OrderRegisterValidator interface.
type MockOrderRegisterValidator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRegisterValidatorMockRecorder
}

// MockOrderRegisterValidatorMockRecorder is the mock recorder for MockOrderRegisterValidator.
type MockOrderRegisterValidatorMockRecorder struct {
	mock *MockOrderRegisterValidator
}

// NewMockOrderRegisterValidator creates a new mock instance.
func NewMockOrderRegisterValidator(ctrl *gomock.Controller) *MockOrderRegisterValidator {
	mock := &MockOrderRegisterValidator{ctrl: ctrl}
	mock.recorder = &MockOrderRegisterValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRegisterValidator) EXPECT() *MockOrderRegisterValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockOrderRegisterValidator) Struct(i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockOrderRegisterValidatorMockRecorder) Struct(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockOrderRegisterValidator)(nil).Struct), i)
}
