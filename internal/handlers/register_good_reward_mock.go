// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/register_good_reward.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/sbilibin2017/go-gophermart/internal/domain"
)

// MockRewardService is a mock of RewardService interface.
type MockRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockRewardServiceMockRecorder
}

// MockRewardServiceMockRecorder is the mock recorder for MockRewardService.
type MockRewardServiceMockRecorder struct {
	mock *MockRewardService
}

// NewMockRewardService creates a new mock instance.
func NewMockRewardService(ctrl *gomock.Controller) *MockRewardService {
	mock := &MockRewardService{ctrl: ctrl}
	mock.recorder = &MockRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardService) EXPECT() *MockRewardServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRewardService) Register(ctx context.Context, reward *domain.Reward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, reward)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRewardServiceMockRecorder) Register(ctx, reward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRewardService)(nil).Register), ctx, reward)
}
