// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/go-gophermart/internal/handlers/user_register.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/sbilibin2017/go-gophermart/internal/domain"
)

// MockUserRegisterService is a mock of UserRegisterService interface.
type MockUserRegisterService struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegisterServiceMockRecorder
}

// MockUserRegisterServiceMockRecorder is the mock recorder for MockUserRegisterService.
type MockUserRegisterServiceMockRecorder struct {
	mock *MockUserRegisterService
}

// NewMockUserRegisterService creates a new mock instance.
func NewMockUserRegisterService(ctrl *gomock.Controller) *MockUserRegisterService {
	mock := &MockUserRegisterService{ctrl: ctrl}
	mock.recorder = &MockUserRegisterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegisterService) EXPECT() *MockUserRegisterServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockUserRegisterService) Register(ctx context.Context, u *domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, u)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserRegisterServiceMockRecorder) Register(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRegisterService)(nil).Register), ctx, u)
}
