// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/user_register.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecases "github.com/sbilibin2017/go-gophermart/internal/usecases"
)

// MockUserRegisterUsecase is a mock of UserRegisterUsecase interface.
type MockUserRegisterUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegisterUsecaseMockRecorder
}

// MockUserRegisterUsecaseMockRecorder is the mock recorder for MockUserRegisterUsecase.
type MockUserRegisterUsecaseMockRecorder struct {
	mock *MockUserRegisterUsecase
}

// NewMockUserRegisterUsecase creates a new mock instance.
func NewMockUserRegisterUsecase(ctrl *gomock.Controller) *MockUserRegisterUsecase {
	mock := &MockUserRegisterUsecase{ctrl: ctrl}
	mock.recorder = &MockUserRegisterUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegisterUsecase) EXPECT() *MockUserRegisterUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUserRegisterUsecase) Execute(ctx context.Context, req *usecases.UserRegisterRequest) (*usecases.UserRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, req)
	ret0, _ := ret[0].(*usecases.UserRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockUserRegisterUsecaseMockRecorder) Execute(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUserRegisterUsecase)(nil).Execute), ctx, req)
}

// MockDecoder is a mock of Decoder interface.
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder struct {
	mock *MockDecoder
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder) EXPECT() *MockDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockDecoder) Decode(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockDecoderMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockDecoder)(nil).Decode), v)
}
