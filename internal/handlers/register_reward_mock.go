// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/register_reward.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/sbilibin2017/go-gophermart/internal/domain"
)

// MockRegisterRewardService is a mock of RegisterRewardService interface.
type MockRegisterRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterRewardServiceMockRecorder
}

// MockRegisterRewardServiceMockRecorder is the mock recorder for MockRegisterRewardService.
type MockRegisterRewardServiceMockRecorder struct {
	mock *MockRegisterRewardService
}

// NewMockRegisterRewardService creates a new mock instance.
func NewMockRegisterRewardService(ctrl *gomock.Controller) *MockRegisterRewardService {
	mock := &MockRegisterRewardService{ctrl: ctrl}
	mock.recorder = &MockRegisterRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterRewardService) EXPECT() *MockRegisterRewardServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterRewardService) Register(ctx context.Context, reward *domain.Reward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, reward)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegisterRewardServiceMockRecorder) Register(ctx, reward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterRewardService)(nil).Register), ctx, reward)
}

// MockRegisterRewardValidator is a mock of RegisterRewardValidator interface.
type MockRegisterRewardValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterRewardValidatorMockRecorder
}

// MockRegisterRewardValidatorMockRecorder is the mock recorder for MockRegisterRewardValidator.
type MockRegisterRewardValidatorMockRecorder struct {
	mock *MockRegisterRewardValidator
}

// NewMockRegisterRewardValidator creates a new mock instance.
func NewMockRegisterRewardValidator(ctrl *gomock.Controller) *MockRegisterRewardValidator {
	mock := &MockRegisterRewardValidator{ctrl: ctrl}
	mock.recorder = &MockRegisterRewardValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterRewardValidator) EXPECT() *MockRegisterRewardValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockRegisterRewardValidator) Struct(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockRegisterRewardValidatorMockRecorder) Struct(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockRegisterRewardValidator)(nil).Struct), v)
}
