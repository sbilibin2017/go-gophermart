// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/order_accept.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-gophermart/internal/types"
)

// MockOrderAcceptService is a mock of OrderAcceptService interface.
type MockOrderAcceptService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderAcceptServiceMockRecorder
}

// MockOrderAcceptServiceMockRecorder is the mock recorder for MockOrderAcceptService.
type MockOrderAcceptServiceMockRecorder struct {
	mock *MockOrderAcceptService
}

// NewMockOrderAcceptService creates a new mock instance.
func NewMockOrderAcceptService(ctrl *gomock.Controller) *MockOrderAcceptService {
	mock := &MockOrderAcceptService{ctrl: ctrl}
	mock.recorder = &MockOrderAcceptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderAcceptService) EXPECT() *MockOrderAcceptServiceMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockOrderAcceptService) Accept(ctx context.Context, order *types.OrderAcceptRequest) (*types.APIStatus, *types.APIStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", ctx, order)
	ret0, _ := ret[0].(*types.APIStatus)
	ret1, _ := ret[1].(*types.APIStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Accept indicates an expected call of Accept.
func (mr *MockOrderAcceptServiceMockRecorder) Accept(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockOrderAcceptService)(nil).Accept), ctx, order)
}
