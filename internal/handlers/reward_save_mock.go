// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/register_good_reward.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-gophermart/internal/types"
)

// MockRegisterGoodRewardService is a mock of RegisterGoodRewardService interface.
type MockRegisterGoodRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterGoodRewardServiceMockRecorder
}

// MockRegisterGoodRewardServiceMockRecorder is the mock recorder for MockRegisterGoodRewardService.
type MockRegisterGoodRewardServiceMockRecorder struct {
	mock *MockRegisterGoodRewardService
}

// NewMockRegisterGoodRewardService creates a new mock instance.
func NewMockRegisterGoodRewardService(ctrl *gomock.Controller) *MockRegisterGoodRewardService {
	mock := &MockRegisterGoodRewardService{ctrl: ctrl}
	mock.recorder = &MockRegisterGoodRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterGoodRewardService) EXPECT() *MockRegisterGoodRewardServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterGoodRewardService) Register(ctx context.Context, reward *types.Reward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, reward)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegisterGoodRewardServiceMockRecorder) Register(ctx, reward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterGoodRewardService)(nil).Register), ctx, reward)
}
