// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/reward_save.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-gophermart/internal/types"
)

// MockRegisterRewardSaveService is a mock of RegisterRewardSaveService interface.
type MockRegisterRewardSaveService struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterRewardSaveServiceMockRecorder
}

// MockRegisterRewardSaveServiceMockRecorder is the mock recorder for MockRegisterRewardSaveService.
type MockRegisterRewardSaveServiceMockRecorder struct {
	mock *MockRegisterRewardSaveService
}

// NewMockRegisterRewardSaveService creates a new mock instance.
func NewMockRegisterRewardSaveService(ctrl *gomock.Controller) *MockRegisterRewardSaveService {
	mock := &MockRegisterRewardSaveService{ctrl: ctrl}
	mock.recorder = &MockRegisterRewardSaveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterRewardSaveService) EXPECT() *MockRegisterRewardSaveServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterRewardSaveService) Register(ctx context.Context, reward *types.Reward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, reward)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegisterRewardSaveServiceMockRecorder) Register(ctx, reward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterRewardSaveService)(nil).Register), ctx, reward)
}

// MockRewardSaveValidator is a mock of RewardSaveValidator interface.
type MockRewardSaveValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRewardSaveValidatorMockRecorder
}

// MockRewardSaveValidatorMockRecorder is the mock recorder for MockRewardSaveValidator.
type MockRewardSaveValidatorMockRecorder struct {
	mock *MockRewardSaveValidator
}

// NewMockRewardSaveValidator creates a new mock instance.
func NewMockRewardSaveValidator(ctrl *gomock.Controller) *MockRewardSaveValidator {
	mock := &MockRewardSaveValidator{ctrl: ctrl}
	mock.recorder = &MockRewardSaveValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardSaveValidator) EXPECT() *MockRewardSaveValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockRewardSaveValidator) Struct(s any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockRewardSaveValidatorMockRecorder) Struct(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockRewardSaveValidator)(nil).Struct), s)
}
