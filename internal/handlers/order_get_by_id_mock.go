// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/order_get_by_id.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-gophermart/internal/types"
)

// MockOrderGetService is a mock of OrderGetService interface.
type MockOrderGetService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderGetServiceMockRecorder
}

// MockOrderGetServiceMockRecorder is the mock recorder for MockOrderGetService.
type MockOrderGetServiceMockRecorder struct {
	mock *MockOrderGetService
}

// NewMockOrderGetService creates a new mock instance.
func NewMockOrderGetService(ctrl *gomock.Controller) *MockOrderGetService {
	mock := &MockOrderGetService{ctrl: ctrl}
	mock.recorder = &MockOrderGetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderGetService) EXPECT() *MockOrderGetServiceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockOrderGetService) GetByID(ctx context.Context, req *types.OrderGetByIDRequest) (*types.OrderGetByIDResponse, *types.APIStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, req)
	ret0, _ := ret[0].(*types.OrderGetByIDResponse)
	ret1, _ := ret[1].(*types.APIStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderGetServiceMockRecorder) GetByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderGetService)(nil).GetByID), ctx, req)
}
