// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/handlers/register_order.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-gophermart/internal/types"
)

// MockRegisterOrderService is a mock of RegisterOrderService interface.
type MockRegisterOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterOrderServiceMockRecorder
}

// MockRegisterOrderServiceMockRecorder is the mock recorder for MockRegisterOrderService.
type MockRegisterOrderServiceMockRecorder struct {
	mock *MockRegisterOrderService
}

// NewMockRegisterOrderService creates a new mock instance.
func NewMockRegisterOrderService(ctrl *gomock.Controller) *MockRegisterOrderService {
	mock := &MockRegisterOrderService{ctrl: ctrl}
	mock.recorder = &MockRegisterOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterOrderService) EXPECT() *MockRegisterOrderServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterOrderService) Register(ctx context.Context, order *types.RegisterOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegisterOrderServiceMockRecorder) Register(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterOrderService)(nil).Register), ctx, order)
}

// MockRegisterOrderValidator is a mock of RegisterOrderValidator interface.
type MockRegisterOrderValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterOrderValidatorMockRecorder
}

// MockRegisterOrderValidatorMockRecorder is the mock recorder for MockRegisterOrderValidator.
type MockRegisterOrderValidatorMockRecorder struct {
	mock *MockRegisterOrderValidator
}

// NewMockRegisterOrderValidator creates a new mock instance.
func NewMockRegisterOrderValidator(ctrl *gomock.Controller) *MockRegisterOrderValidator {
	mock := &MockRegisterOrderValidator{ctrl: ctrl}
	mock.recorder = &MockRegisterOrderValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterOrderValidator) EXPECT() *MockRegisterOrderValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockRegisterOrderValidator) Struct(s any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockRegisterOrderValidatorMockRecorder) Struct(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockRegisterOrderValidator)(nil).Struct), s)
}
