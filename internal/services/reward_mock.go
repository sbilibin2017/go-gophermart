// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/services/good_reward.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGoodRewardExistsRepository is a mock of GoodRewardExistsRepository interface.
type MockGoodRewardExistsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGoodRewardExistsRepositoryMockRecorder
}

// MockGoodRewardExistsRepositoryMockRecorder is the mock recorder for MockGoodRewardExistsRepository.
type MockGoodRewardExistsRepositoryMockRecorder struct {
	mock *MockGoodRewardExistsRepository
}

// NewMockGoodRewardExistsRepository creates a new mock instance.
func NewMockGoodRewardExistsRepository(ctrl *gomock.Controller) *MockGoodRewardExistsRepository {
	mock := &MockGoodRewardExistsRepository{ctrl: ctrl}
	mock.recorder = &MockGoodRewardExistsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoodRewardExistsRepository) EXPECT() *MockGoodRewardExistsRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockGoodRewardExistsRepository) Exists(ctx context.Context, rewardID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, rewardID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockGoodRewardExistsRepositoryMockRecorder) Exists(ctx, rewardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockGoodRewardExistsRepository)(nil).Exists), ctx, rewardID)
}

// MockGoodRewardSaveRepository is a mock of GoodRewardSaveRepository interface.
type MockGoodRewardSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGoodRewardSaveRepositoryMockRecorder
}

// MockGoodRewardSaveRepositoryMockRecorder is the mock recorder for MockGoodRewardSaveRepository.
type MockGoodRewardSaveRepositoryMockRecorder struct {
	mock *MockGoodRewardSaveRepository
}

// NewMockGoodRewardSaveRepository creates a new mock instance.
func NewMockGoodRewardSaveRepository(ctrl *gomock.Controller) *MockGoodRewardSaveRepository {
	mock := &MockGoodRewardSaveRepository{ctrl: ctrl}
	mock.recorder = &MockGoodRewardSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoodRewardSaveRepository) EXPECT() *MockGoodRewardSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockGoodRewardSaveRepository) Save(ctx context.Context, rewardID string, reward int64, rewardType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, rewardID, reward, rewardType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockGoodRewardSaveRepositoryMockRecorder) Save(ctx, rewardID, reward, rewardType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGoodRewardSaveRepository)(nil).Save), ctx, rewardID, reward, rewardType)
}

// MockGoodRewardValidator is a mock of GoodRewardValidator interface.
type MockGoodRewardValidator struct {
	ctrl     *gomock.Controller
	recorder *MockGoodRewardValidatorMockRecorder
}

// MockGoodRewardValidatorMockRecorder is the mock recorder for MockGoodRewardValidator.
type MockGoodRewardValidatorMockRecorder struct {
	mock *MockGoodRewardValidator
}

// NewMockGoodRewardValidator creates a new mock instance.
func NewMockGoodRewardValidator(ctrl *gomock.Controller) *MockGoodRewardValidator {
	mock := &MockGoodRewardValidator{ctrl: ctrl}
	mock.recorder = &MockGoodRewardValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoodRewardValidator) EXPECT() *MockGoodRewardValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockGoodRewardValidator) Struct(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockGoodRewardValidatorMockRecorder) Struct(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockGoodRewardValidator)(nil).Struct), v)
}
