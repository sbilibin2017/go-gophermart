// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/services/order_accept.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-gophermart/internal/types"
)

// MockOrderAcceptOrderExistsByIDRepository is a mock of OrderAcceptOrderExistsByIDRepository interface.
type MockOrderAcceptOrderExistsByIDRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderAcceptOrderExistsByIDRepositoryMockRecorder
}

// MockOrderAcceptOrderExistsByIDRepositoryMockRecorder is the mock recorder for MockOrderAcceptOrderExistsByIDRepository.
type MockOrderAcceptOrderExistsByIDRepositoryMockRecorder struct {
	mock *MockOrderAcceptOrderExistsByIDRepository
}

// NewMockOrderAcceptOrderExistsByIDRepository creates a new mock instance.
func NewMockOrderAcceptOrderExistsByIDRepository(ctrl *gomock.Controller) *MockOrderAcceptOrderExistsByIDRepository {
	mock := &MockOrderAcceptOrderExistsByIDRepository{ctrl: ctrl}
	mock.recorder = &MockOrderAcceptOrderExistsByIDRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderAcceptOrderExistsByIDRepository) EXPECT() *MockOrderAcceptOrderExistsByIDRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockOrderAcceptOrderExistsByIDRepository) Exists(ctx context.Context, orderID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, orderID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockOrderAcceptOrderExistsByIDRepositoryMockRecorder) Exists(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockOrderAcceptOrderExistsByIDRepository)(nil).Exists), ctx, orderID)
}

// MockOrderAcceptOrderSaveRepository is a mock of OrderAcceptOrderSaveRepository interface.
type MockOrderAcceptOrderSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderAcceptOrderSaveRepositoryMockRecorder
}

// MockOrderAcceptOrderSaveRepositoryMockRecorder is the mock recorder for MockOrderAcceptOrderSaveRepository.
type MockOrderAcceptOrderSaveRepositoryMockRecorder struct {
	mock *MockOrderAcceptOrderSaveRepository
}

// NewMockOrderAcceptOrderSaveRepository creates a new mock instance.
func NewMockOrderAcceptOrderSaveRepository(ctrl *gomock.Controller) *MockOrderAcceptOrderSaveRepository {
	mock := &MockOrderAcceptOrderSaveRepository{ctrl: ctrl}
	mock.recorder = &MockOrderAcceptOrderSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderAcceptOrderSaveRepository) EXPECT() *MockOrderAcceptOrderSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockOrderAcceptOrderSaveRepository) Save(ctx context.Context, orderID, status string, accrual int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, orderID, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOrderAcceptOrderSaveRepositoryMockRecorder) Save(ctx, orderID, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrderAcceptOrderSaveRepository)(nil).Save), ctx, orderID, status, accrual)
}

// MockOrderAcceptGoodRewardFilterILikeRepository is a mock of OrderAcceptGoodRewardFilterILikeRepository interface.
type MockOrderAcceptGoodRewardFilterILikeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderAcceptGoodRewardFilterILikeRepositoryMockRecorder
}

// MockOrderAcceptGoodRewardFilterILikeRepositoryMockRecorder is the mock recorder for MockOrderAcceptGoodRewardFilterILikeRepository.
type MockOrderAcceptGoodRewardFilterILikeRepositoryMockRecorder struct {
	mock *MockOrderAcceptGoodRewardFilterILikeRepository
}

// NewMockOrderAcceptGoodRewardFilterILikeRepository creates a new mock instance.
func NewMockOrderAcceptGoodRewardFilterILikeRepository(ctrl *gomock.Controller) *MockOrderAcceptGoodRewardFilterILikeRepository {
	mock := &MockOrderAcceptGoodRewardFilterILikeRepository{ctrl: ctrl}
	mock.recorder = &MockOrderAcceptGoodRewardFilterILikeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderAcceptGoodRewardFilterILikeRepository) EXPECT() *MockOrderAcceptGoodRewardFilterILikeRepositoryMockRecorder {
	return m.recorder
}

// FilterILike mocks base method.
func (m *MockOrderAcceptGoodRewardFilterILikeRepository) FilterILike(ctx context.Context, match string, fields []string) (*types.RewardDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterILike", ctx, match, fields)
	ret0, _ := ret[0].(*types.RewardDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterILike indicates an expected call of FilterILike.
func (mr *MockOrderAcceptGoodRewardFilterILikeRepositoryMockRecorder) FilterILike(ctx, match, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterILike", reflect.TypeOf((*MockOrderAcceptGoodRewardFilterILikeRepository)(nil).FilterILike), ctx, match, fields)
}

// MockOrderAcceptValidator is a mock of OrderAcceptValidator interface.
type MockOrderAcceptValidator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderAcceptValidatorMockRecorder
}

// MockOrderAcceptValidatorMockRecorder is the mock recorder for MockOrderAcceptValidator.
type MockOrderAcceptValidatorMockRecorder struct {
	mock *MockOrderAcceptValidator
}

// NewMockOrderAcceptValidator creates a new mock instance.
func NewMockOrderAcceptValidator(ctrl *gomock.Controller) *MockOrderAcceptValidator {
	mock := &MockOrderAcceptValidator{ctrl: ctrl}
	mock.recorder = &MockOrderAcceptValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderAcceptValidator) EXPECT() *MockOrderAcceptValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockOrderAcceptValidator) Struct(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockOrderAcceptValidatorMockRecorder) Struct(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockOrderAcceptValidator)(nil).Struct), v)
}
