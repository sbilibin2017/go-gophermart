// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/services/register_reward.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegisterRewardExistsRepository is a mock of RegisterRewardExistsRepository interface.
type MockRegisterRewardExistsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterRewardExistsRepositoryMockRecorder
}

// MockRegisterRewardExistsRepositoryMockRecorder is the mock recorder for MockRegisterRewardExistsRepository.
type MockRegisterRewardExistsRepositoryMockRecorder struct {
	mock *MockRegisterRewardExistsRepository
}

// NewMockRegisterRewardExistsRepository creates a new mock instance.
func NewMockRegisterRewardExistsRepository(ctrl *gomock.Controller) *MockRegisterRewardExistsRepository {
	mock := &MockRegisterRewardExistsRepository{ctrl: ctrl}
	mock.recorder = &MockRegisterRewardExistsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterRewardExistsRepository) EXPECT() *MockRegisterRewardExistsRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockRegisterRewardExistsRepository) Exists(ctx context.Context, filter map[string]any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, filter)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRegisterRewardExistsRepositoryMockRecorder) Exists(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRegisterRewardExistsRepository)(nil).Exists), ctx, filter)
}

// MockRegisterRewardSaveRepository is a mock of RegisterRewardSaveRepository interface.
type MockRegisterRewardSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterRewardSaveRepositoryMockRecorder
}

// MockRegisterRewardSaveRepositoryMockRecorder is the mock recorder for MockRegisterRewardSaveRepository.
type MockRegisterRewardSaveRepositoryMockRecorder struct {
	mock *MockRegisterRewardSaveRepository
}

// NewMockRegisterRewardSaveRepository creates a new mock instance.
func NewMockRegisterRewardSaveRepository(ctrl *gomock.Controller) *MockRegisterRewardSaveRepository {
	mock := &MockRegisterRewardSaveRepository{ctrl: ctrl}
	mock.recorder = &MockRegisterRewardSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterRewardSaveRepository) EXPECT() *MockRegisterRewardSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockRegisterRewardSaveRepository) Save(ctx context.Context, data map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRegisterRewardSaveRepositoryMockRecorder) Save(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRegisterRewardSaveRepository)(nil).Save), ctx, data)
}
