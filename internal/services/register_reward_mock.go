// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/services/register_reward.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRewardExistsRepository is a mock of RewardExistsRepository interface.
type MockRewardExistsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRewardExistsRepositoryMockRecorder
}

// MockRewardExistsRepositoryMockRecorder is the mock recorder for MockRewardExistsRepository.
type MockRewardExistsRepositoryMockRecorder struct {
	mock *MockRewardExistsRepository
}

// NewMockRewardExistsRepository creates a new mock instance.
func NewMockRewardExistsRepository(ctrl *gomock.Controller) *MockRewardExistsRepository {
	mock := &MockRewardExistsRepository{ctrl: ctrl}
	mock.recorder = &MockRewardExistsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardExistsRepository) EXPECT() *MockRewardExistsRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockRewardExistsRepository) Exists(ctx context.Context, filter map[string]any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, filter)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRewardExistsRepositoryMockRecorder) Exists(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRewardExistsRepository)(nil).Exists), ctx, filter)
}

// MockRewardSaveRepository is a mock of RewardSaveRepository interface.
type MockRewardSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRewardSaveRepositoryMockRecorder
}

// MockRewardSaveRepositoryMockRecorder is the mock recorder for MockRewardSaveRepository.
type MockRewardSaveRepositoryMockRecorder struct {
	mock *MockRewardSaveRepository
}

// NewMockRewardSaveRepository creates a new mock instance.
func NewMockRewardSaveRepository(ctrl *gomock.Controller) *MockRewardSaveRepository {
	mock := &MockRewardSaveRepository{ctrl: ctrl}
	mock.recorder = &MockRewardSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardSaveRepository) EXPECT() *MockRewardSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockRewardSaveRepository) Save(ctx context.Context, match map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, match)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRewardSaveRepositoryMockRecorder) Save(ctx, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRewardSaveRepository)(nil).Save), ctx, match)
}
