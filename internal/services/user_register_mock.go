// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/services/user_register.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-gophermart/internal/types"
)

// MockUserRegisterUserFilterOneRepository is a mock of UserRegisterUserFilterOneRepository interface.
type MockUserRegisterUserFilterOneRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegisterUserFilterOneRepositoryMockRecorder
}

// MockUserRegisterUserFilterOneRepositoryMockRecorder is the mock recorder for MockUserRegisterUserFilterOneRepository.
type MockUserRegisterUserFilterOneRepositoryMockRecorder struct {
	mock *MockUserRegisterUserFilterOneRepository
}

// NewMockUserRegisterUserFilterOneRepository creates a new mock instance.
func NewMockUserRegisterUserFilterOneRepository(ctrl *gomock.Controller) *MockUserRegisterUserFilterOneRepository {
	mock := &MockUserRegisterUserFilterOneRepository{ctrl: ctrl}
	mock.recorder = &MockUserRegisterUserFilterOneRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegisterUserFilterOneRepository) EXPECT() *MockUserRegisterUserFilterOneRepositoryMockRecorder {
	return m.recorder
}

// FilterOne mocks base method.
func (m *MockUserRegisterUserFilterOneRepository) FilterOne(ctx context.Context, login string) (*types.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOne", ctx, login)
	ret0, _ := ret[0].(*types.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOne indicates an expected call of FilterOne.
func (mr *MockUserRegisterUserFilterOneRepositoryMockRecorder) FilterOne(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOne", reflect.TypeOf((*MockUserRegisterUserFilterOneRepository)(nil).FilterOne), ctx, login)
}

// MockUserRegisterUserSaveRepository is a mock of UserRegisterUserSaveRepository interface.
type MockUserRegisterUserSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegisterUserSaveRepositoryMockRecorder
}

// MockUserRegisterUserSaveRepositoryMockRecorder is the mock recorder for MockUserRegisterUserSaveRepository.
type MockUserRegisterUserSaveRepositoryMockRecorder struct {
	mock *MockUserRegisterUserSaveRepository
}

// NewMockUserRegisterUserSaveRepository creates a new mock instance.
func NewMockUserRegisterUserSaveRepository(ctrl *gomock.Controller) *MockUserRegisterUserSaveRepository {
	mock := &MockUserRegisterUserSaveRepository{ctrl: ctrl}
	mock.recorder = &MockUserRegisterUserSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegisterUserSaveRepository) EXPECT() *MockUserRegisterUserSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockUserRegisterUserSaveRepository) Save(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserRegisterUserSaveRepositoryMockRecorder) Save(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRegisterUserSaveRepository)(nil).Save), ctx, login, password)
}

// MockUserRegisterValidator is a mock of UserRegisterValidator interface.
type MockUserRegisterValidator struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegisterValidatorMockRecorder
}

// MockUserRegisterValidatorMockRecorder is the mock recorder for MockUserRegisterValidator.
type MockUserRegisterValidatorMockRecorder struct {
	mock *MockUserRegisterValidator
}

// NewMockUserRegisterValidator creates a new mock instance.
func NewMockUserRegisterValidator(ctrl *gomock.Controller) *MockUserRegisterValidator {
	mock := &MockUserRegisterValidator{ctrl: ctrl}
	mock.recorder = &MockUserRegisterValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegisterValidator) EXPECT() *MockUserRegisterValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *MockUserRegisterValidator) Struct(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockUserRegisterValidatorMockRecorder) Struct(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockUserRegisterValidator)(nil).Struct), v)
}
