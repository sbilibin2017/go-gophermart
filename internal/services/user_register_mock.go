// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/internal/services/user_register.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repositories "github.com/sbilibin2017/go-gophermart/internal/repositories"
)

// MockUserFilterRepo is a mock of UserFilterRepo interface.
type MockUserFilterRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserFilterRepoMockRecorder
}

// MockUserFilterRepoMockRecorder is the mock recorder for MockUserFilterRepo.
type MockUserFilterRepoMockRecorder struct {
	mock *MockUserFilterRepo
}

// NewMockUserFilterRepo creates a new mock instance.
func NewMockUserFilterRepo(ctrl *gomock.Controller) *MockUserFilterRepo {
	mock := &MockUserFilterRepo{ctrl: ctrl}
	mock.recorder = &MockUserFilterRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFilterRepo) EXPECT() *MockUserFilterRepoMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockUserFilterRepo) Filter(ctx context.Context, filter *repositories.UserFilter) (*repositories.UserFiltered, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filter)
	ret0, _ := ret[0].(*repositories.UserFiltered)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockUserFilterRepoMockRecorder) Filter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockUserFilterRepo)(nil).Filter), ctx, filter)
}

// MockUserSaveRepo is a mock of UserSaveRepo interface.
type MockUserSaveRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserSaveRepoMockRecorder
}

// MockUserSaveRepoMockRecorder is the mock recorder for MockUserSaveRepo.
type MockUserSaveRepoMockRecorder struct {
	mock *MockUserSaveRepo
}

// NewMockUserSaveRepo creates a new mock instance.
func NewMockUserSaveRepo(ctrl *gomock.Controller) *MockUserSaveRepo {
	mock := &MockUserSaveRepo{ctrl: ctrl}
	mock.recorder = &MockUserSaveRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSaveRepo) EXPECT() *MockUserSaveRepoMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockUserSaveRepo) Save(ctx context.Context, user *repositories.UserSave) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserSaveRepoMockRecorder) Save(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserSaveRepo)(nil).Save), ctx, user)
}

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUnitOfWork) Do(ctx context.Context, operation func(*sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUnitOfWorkMockRecorder) Do(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUnitOfWork)(nil).Do), ctx, operation)
}

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHasher) Hash(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockHasherMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHasher)(nil).Hash), password)
}

// MockJWTGenerator is a mock of JWTGenerator interface.
type MockJWTGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockJWTGeneratorMockRecorder
}

// MockJWTGeneratorMockRecorder is the mock recorder for MockJWTGenerator.
type MockJWTGeneratorMockRecorder struct {
	mock *MockJWTGenerator
}

// NewMockJWTGenerator creates a new mock instance.
func NewMockJWTGenerator(ctrl *gomock.Controller) *MockJWTGenerator {
	mock := &MockJWTGenerator{ctrl: ctrl}
	mock.recorder = &MockJWTGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTGenerator) EXPECT() *MockJWTGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockJWTGenerator) Generate(login string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", login)
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockJWTGeneratorMockRecorder) Generate(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockJWTGenerator)(nil).Generate), login)
}
