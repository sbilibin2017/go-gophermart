// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/go-gophermart/internal/services/user_register.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserGetRepo is a mock of UserGetRepo interface.
type MockUserGetRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserGetRepoMockRecorder
}

// MockUserGetRepoMockRecorder is the mock recorder for MockUserGetRepo.
type MockUserGetRepoMockRecorder struct {
	mock *MockUserGetRepo
}

// NewMockUserGetRepo creates a new mock instance.
func NewMockUserGetRepo(ctrl *gomock.Controller) *MockUserGetRepo {
	mock := &MockUserGetRepo{ctrl: ctrl}
	mock.recorder = &MockUserGetRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGetRepo) EXPECT() *MockUserGetRepoMockRecorder {
	return m.recorder
}

// GetByParam mocks base method.
func (m *MockUserGetRepo) GetByParam(ctx context.Context, p map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, p)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockUserGetRepoMockRecorder) GetByParam(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockUserGetRepo)(nil).GetByParam), ctx, p)
}

// MockUserSaveRepo is a mock of UserSaveRepo interface.
type MockUserSaveRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserSaveRepoMockRecorder
}

// MockUserSaveRepoMockRecorder is the mock recorder for MockUserSaveRepo.
type MockUserSaveRepoMockRecorder struct {
	mock *MockUserSaveRepo
}

// NewMockUserSaveRepo creates a new mock instance.
func NewMockUserSaveRepo(ctrl *gomock.Controller) *MockUserSaveRepo {
	mock := &MockUserSaveRepo{ctrl: ctrl}
	mock.recorder = &MockUserSaveRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSaveRepo) EXPECT() *MockUserSaveRepoMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockUserSaveRepo) Save(ctx context.Context, u map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserSaveRepoMockRecorder) Save(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserSaveRepo)(nil).Save), ctx, u)
}

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUnitOfWork) Do(ctx context.Context, operation func(*sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUnitOfWorkMockRecorder) Do(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUnitOfWork)(nil).Do), ctx, operation)
}
