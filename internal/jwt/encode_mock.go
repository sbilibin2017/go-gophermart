// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-gophermart/go-gophermart/internal/jwt/encode.go

// Package jwt is a generated GoMock package.
package jwt

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockEncodeConfig is a mock of EncodeConfig interface.
type MockEncodeConfig struct {
	ctrl     *gomock.Controller
	recorder *MockEncodeConfigMockRecorder
}

// MockEncodeConfigMockRecorder is the mock recorder for MockEncodeConfig.
type MockEncodeConfigMockRecorder struct {
	mock *MockEncodeConfig
}

// NewMockEncodeConfig creates a new mock instance.
func NewMockEncodeConfig(ctrl *gomock.Controller) *MockEncodeConfig {
	mock := &MockEncodeConfig{ctrl: ctrl}
	mock.recorder = &MockEncodeConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncodeConfig) EXPECT() *MockEncodeConfigMockRecorder {
	return m.recorder
}

// GetJWTExp mocks base method.
func (m *MockEncodeConfig) GetJWTExp() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWTExp")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetJWTExp indicates an expected call of GetJWTExp.
func (mr *MockEncodeConfigMockRecorder) GetJWTExp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWTExp", reflect.TypeOf((*MockEncodeConfig)(nil).GetJWTExp))
}

// GetJWTSecretKey mocks base method.
func (m *MockEncodeConfig) GetJWTSecretKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWTSecretKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJWTSecretKey indicates an expected call of GetJWTSecretKey.
func (mr *MockEncodeConfigMockRecorder) GetJWTSecretKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWTSecretKey", reflect.TypeOf((*MockEncodeConfig)(nil).GetJWTSecretKey))
}
