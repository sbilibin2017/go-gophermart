// Package db предоставляет утилиты для работы с транзакциями в контексте.
// Он позволяет сохранять и извлекать транзакции из контекста, обеспечивая удобный способ работы с базой данных
// в рамках транзакций через контекст.
package db

import (
	"context"
	"database/sql"
)

type contextKey string

const txKey contextKey = "tx"

// SetTx сохраняет транзакцию в контексте.
//
// Эта функция позволяет сохранить объект транзакции (*sql.Tx) в контексте
// выполнения запроса. Использование контекста с транзакцией позволяет
// передавать транзакцию через цепочку вызовов и обрабатывать её
// в любом месте приложения, где доступен контекст.
//
// Параметры:
//   - ctx: контекст, в который нужно добавить транзакцию.
//   - tx: объект транзакции (*sql.Tx), который нужно сохранить.
//
// Возвращает:
//   - новый контекст с сохранённой транзакцией.
func SetTx(ctx context.Context, tx *sql.Tx) context.Context {
	return context.WithValue(ctx, txKey, tx)
}

// GetTx извлекает транзакцию из контекста.
//
// Эта функция позволяет извлечь объект транзакции (*sql.Tx) из контекста,
// если он был туда сохранён с помощью SetTx. Функция возвращает два значения:
// первое - это объект транзакции (или nil, если транзакция не найдена),
// второе - булево значение, которое указывает, была ли транзакция найдена в контексте.
//
// Параметры:
//   - ctx: контекст, из которого нужно извлечь транзакцию.
//
// Возвращает:
//   - транзакцию (*sql.Tx), если она найдена в контексте, иначе nil;
//   - булевое значение, указывающее, была ли транзакция найдена в контексте.
func GetTx(ctx context.Context) (*sql.Tx, bool) {
	tx, ok := ctx.Value(txKey).(*sql.Tx)
	return tx, ok
}
